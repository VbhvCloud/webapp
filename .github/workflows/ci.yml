name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches:
      - main


concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  pytest:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    env:
      # postgres://user:password@host:port/database
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/local.txt

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt

      - name: Test with pytest
        run: python manage.py test
  
  check_format:
    runs-on: ubuntu-latest
    env:
      PKR_VAR_ami_users: ${{ secrets.AMI_USERS }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Packer
      run: sudo apt-get update && sudo apt-get install -y packer
    - name: Check Packer file format
      run: |
        if ! packer fmt -check packer; then
          echo "Packer format is not correct. Please run 'packer fmt' to fix the issue."
          exit 1
        fi
    - name: Check Packer file valid
      run: |
        packer init packer
        if ! packer validate packer; then
          echo "Packer files are not valid."
          exit 1
        fi

  update-launch-template:
    name: Update launch template
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
      AWS_DEFAULT_REGION: ${{ secrets.REGION }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install AWS CLI
      run: |
        sudo apt-get update && sudo apt-get install -y awscli

    - name: Get latest AMI ID
      run: |

        export latest_ami=$(aws ec2 describe-images --executable-users self --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
        echo "Latest AMI ID: $latest_ami"

        export version_number=$(aws ec2 describe-launch-template-versions --launch-template-name asg_launch_config --query 'sort_by(LaunchTemplateVersions, &VersionNumber)[-1].VersionNumber' --output text)
        echo "Latest AMI version: $version_number"

    - name: Create new Launch Template version
      run: |
        aws ec2 create-launch-template-version --launch-template-name asg_launch_config  --launch-template-data "ImageId=$latest_ami" --source-version $version_number
    
    - name: Autoscaling group instance refresh
      run: |
        aws autoscaling start-instance-refresh --auto-scaling-group-name csye6225-asg-spring2023 --strategy Rolling --desired-configuration '{"LaunchTemplate": {"LaunchTemplateName":"asg_launch_config", "Version":"$Latest"}}'
